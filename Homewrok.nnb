{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Homework\n\nDesign a flexible OOP system to describe characters in a RPG game\n\nThere are 4 Unique Characters which use Different Types of Attacking mechanisms and Defending mechanisms.\n\n- Orges - fights with club and defends with shield\n- Peons - fights with club and defends with shield\n- Knights - fights with a Sword and defends with Armor\n- Archer - fights with Bow and Arrow and has only is tunic to protect them\n\n- All Characters can collect gold and this will always be the same for every new type of character\n\nAt the end of this each character should be able to attack and defend and collect gold. If needed any character should be able to change his fighting style, say if a knight losing his sword, but finds a club he should be able to change his fighting mechanism to use the club\n\n<b>Hint: </b> To complete this assignment you will need multiple classes and interfaces and an Abstract class\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "console.log(\"Getting started...\");\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Getting started...",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Interfaces - Attack, Defend, Collect\ninterface Attack {\n    attack(): string;\n}\n\ninterface Defend {\n    defend(): string;\n}\n\ninterface Collect {\n    collectGold(amount: number): void;\n}\n\n// Classes for different attacking mechanisms\nclass AttackWithClub implements Attack {\n    attack(): string {\n        return \"Attacking with a club.\";\n    }\n}\n\nclass AttackWithSword implements Attack {\n    attack(): string {\n        return \"Attacking with a sword.\";\n    }\n}\n\nclass AttackWithBowAndArrow implements Attack {\n    attack(): string {\n        return \"Shooting a bow and arrow.\";\n    }\n}\n\n// Classes for different defending mechanisms\nclass DefendsWithShield implements Defend {\n    defend(): string {\n        return \"Defending with a shield.\";\n    }\n}\n\nclass DefendsWithArmor implements Defend {\n    defend(): string {\n        return \"Defending with armor.\";\n    }\n}\n\nclass DefendsWithTunic implements Defend {\n    defend(): string {\n        return \"Defending with only a tunic... yikes!\";\n    }\n}\n\n// Abstract Character class that implements the interfaces \n\nabstract class Character implements Attack, Defend, Collect {\n    protected _gold: number = 0;\n    protected abstract attackAbility$: Attack;\n    protected abstract defendAbility$: Defend;\n\n    constructor(protected _name: string) {}\n\n    attack(): string {\n        return `${this._name} is ${this.attackAbility$.attack()}`;\n    }\n\n    defend(): string {\n        return `${this._name} is ${this.defendAbility$.defend()}`;\n    }\n\n    collectGold(amount: number): void {\n        this._gold += amount;\n    }\n\n    toString(): string {\n        return `${this.constructor.name} {\\n` +\n            `  _name: '${this._name}',\\n` +\n            `  _gold: ${this._gold},\\n` +\n            `  'attackAbility$': ${this.attackAbility$.constructor.name} {},\\n` +\n            `  'defendAbility$': ${this.defendAbility$.constructor.name} {}\\n` +\n            `}`;\n    }\n}\n\n// Classes that inherit from Character\nclass Ogre extends Character {\n    protected attackAbility$: Attack = new AttackWithClub();\n    protected defendAbility$: Defend = new DefendsWithShield();\n}\n\nclass Peon extends Character {\n    protected attackAbility$: Attack = new AttackWithClub();\n    protected defendAbility$: Defend = new DefendsWithShield();\n}\n\nclass Knight extends Character {\n    protected attackAbility$: Attack = new AttackWithSword();\n    protected defendAbility$: Defend = new DefendsWithArmor();\n}\n\nclass Archer extends Character {\n    protected attackAbility$: Attack = new AttackWithBowAndArrow();\n    protected defendAbility$: Defend = new DefendsWithTunic();\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let shrek = new Ogre('Shrek');\nlet peon = new Peon('Beth');\nlet brian = new Knight('Brian');\nlet legolas = new Archer('Legolas');\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let allChars: Character[] = [shrek, peon, brian, legolas]\nconsole.log(allChars)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  Ogre {",
                                "    _name: 'Shrek',",
                                "    _gold: 0,",
                                "    'attackAbility$': AttackWithClub {},",
                                "    'defendAbility$': DefendsWithShield {}",
                                "  },",
                                "  Peon {",
                                "    _name: 'Beth',",
                                "    _gold: 0,",
                                "    'attackAbility$': AttackWithClub {},",
                                "    'defendAbility$': DefendsWithShield {}",
                                "  },",
                                "  Knight {",
                                "    _name: 'Brian',",
                                "    _gold: 0,",
                                "    'attackAbility$': AttackWithSword {},",
                                "    'defendAbility$': DefendsWithArmor {}",
                                "  },",
                                "  Archer {",
                                "    _name: 'Legolas',",
                                "    _gold: 0,",
                                "    'attackAbility$': AttackWithBowAndArrow {},",
                                "    'defendAbility$': DefendsWithTunic {}",
                                "  }",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function getRandomNumber():number{\n    return Math.ceil(Math.random()*25)\n}\n\ngetRandomNumber()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m25\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "for (let char of allChars) {\n    console.log(char.attack());\n    console.log(char.defend());\n    char.collectGold(getRandomNumber());\n    console.log(`${char._name} has collected ${char._gold} gold. Their total gold is ${char._gold}`);\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Shrek is Attacking with a club.",
                                "Shrek is Defending with a shield.",
                                "Shrek has collected 119 gold. Their total gold is 119",
                                "Beth is Attacking with a club.",
                                "Beth is Defending with a shield.",
                                "Beth has collected 129 gold. Their total gold is 129",
                                "Brian is Attacking with a sword.",
                                "Brian is Defending with armor.",
                                "Brian has collected 109 gold. Their total gold is 109",
                                "Legolas is Shooting a bow and arrow.",
                                "Legolas is Defending with only a tunic... yikes!",
                                "Legolas has collected 120 gold. Their total gold is 120",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}